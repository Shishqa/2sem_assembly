     1                                  ;;=========================================================================
     2                                  ;; printf.asm                                           Shishqa, MIPT 2020
     3                                  ;;=========================================================================
     4                                  
     5                                  %macro      multipop 1-*
     6                                  
     7                                              %rep %0
     8                                  
     9                                                  pop %1
    10                                  
    11                                              %rotate 1
    12                                              %endrep
    13                                  
    14                                  %endmacro
    15                                  
    16                                              global  printf
    17                                  
    18                                              extern  _put_s
    19                                              extern  _put_c
    20                                              extern  _put_u
    21                                              extern  _put_b
    22                                              extern  _put_o
    23                                              extern  _put_x
    24                                              extern  _put_d
    25                                  
    26                                              extern  _flush_buffer
    27                                              extern  _set_buffer
    28                                  
    29                                              section .text
    30                                  
    31                                  ;;=========================================================================
    32                                  ;; printf
    33                                  ;;
    34                                  ;; supports: %d %u %b %o %x %c %s %%
    35                                  ;;
    36                                  ;; ENTRY: RDI <- format string address (null terminated)
    37                                  ;;
    38                                  ;;        {RSI RDX RCX R8 R9} <- {1-5th args from left to right}
    39                                  ;;
    40                                  ;;        STACK <- other args from right to left (6th on the top)
    41                                  ;;
    42                                  ;; DESTR: RAX RBX RCX RDX RSI RDI R8 ; DF
    43                                  ;;=========================================================================
    44                                  
    45                                  printf:
    46 00000000 58                                  pop     rax                             ; ret addr -> RAX
    47                                  
    48 00000001 4151                                push    r9
    49 00000003 4150                                push    r8
    50 00000005 51                                  push    rcx                             ; push args passed
    51 00000006 52                                  push    rdx                             ; by registers to
    52 00000007 56                                  push    rsi                             ; stack
    53                                  
    54 00000008 50                                  push    rax                             ; push ret addr(RAX)
    55                                  
    56 00000009 55                                  push    rbp                             ; save old RBP
    57 0000000A 4889E5                              mov     rbp, rsp                        ; 
    58 0000000D 4883C510                            add     rbp, 16                         ; RBP -> 1st arg 
    59                                  
    60 00000011 E8(00000000)                        call    _set_buffer                     ; align buf ptrs
    61                                  
    62 00000016 53                                  push    rbx                             ; save RBX
    63                                  
    64 00000017 4D31D2                              xor     r10, r10
    65                                  
    66                                  .printf_loop:
    67                                  
    68 0000001A 4889F8                              mov     rax, rdi
    69 0000001D E842000000                          call    next_flag                       ; find format flag
    70                                  
    71 00000022 30DB                                xor     bl, bl
    72 00000024 861F                                xchg    byte [rdi], bl                  ; '%' <-> '0'
    73                                                                                      ; (to make _put_s work)
    74 00000026 4889C6                              mov     rsi, rax                        ; RSI = str block begin
    75 00000029 E8(00000000)                        call    _put_s                          ; print this block
    76 0000002E 4889F7                              mov     rdi, rsi                        ; RDI = RDI before puts
    77                                  
    78 00000031 861F                                xchg    byte [rdi], bl                  ; '0' <-> '%'
    79                                  
    80 00000033 803F00                              cmp     byte [rdi], 0                   ; if met '0', exit
    81 00000036 741A                                je      .exit
    82                                  
    83 00000038 48FFC7                              inc     rdi
    84 0000003B E834000000                          call    parse_flag                      ; parse current flag
    85 00000040 48FFC7                              inc     rdi
    86                                  
    87 00000043 807FFF25                            cmp     byte [rdi-1], SHIELD_FLAG       ; if printed one of the args,
    88 00000047 74D1                                je      .printf_loop                    ; prepare next arg
    89                                  
    90 00000049 4883C508                            add     rbp, 8                          ; RBP -> next arg
    91 0000004D 49FFC2                              inc     r10
    92 00000050 EBC8                                jmp     .printf_loop
    93                                  
    94                                  .exit:
    95 00000052 5B                                  pop     rbx                             ; restore RBX
    96 00000053 5D                                  pop     rbp                             ; restore RBP
    97                                  
    98 00000054 E8(00000000)                        call    _flush_buffer
    99                                  
   100 00000059 5F                                  pop     rdi
   101                                  
   102                                              multipop rax, rax, rax, rax, rax
   102                              <1> 
   102                              <1>  %rep %0
   102                              <1> 
   102                              <1>  pop %1
   102                              <1> 
   102                              <1>  %rotate 1
   102                              <1>  %endrep
   102                              <2> 
   102 0000005A 58                  <2>  pop %1
   102                              <2> 
   102                              <2>  %rotate 1
   102                              <2> 
   102 0000005B 58                  <2>  pop %1
   102                              <2> 
   102                              <2>  %rotate 1
   102                              <2> 
   102 0000005C 58                  <2>  pop %1
   102                              <2> 
   102                              <2>  %rotate 1
   102                              <2> 
   102 0000005D 58                  <2>  pop %1
   102                              <2> 
   102                              <2>  %rotate 1
   102                              <2> 
   102 0000005E 58                  <2>  pop %1
   102                              <2> 
   102                              <2>  %rotate 1
   102                              <1> 
   103                                  
   104 0000005F 57                                  push    rdi
   105                                  
   106 00000060 4C89D0                              mov     rax, r10
   107                                  
   108 00000063 C3                                  ret
   109                                  
   110                                  ;;=========================================================================
   111                                  ;; Find next format flag
   112                                  ;;
   113                                  ;; ENTRY: RDI <- current cursor position
   114                                  ;; EXIT:  RDI <- next format flag pos (marker is '%')
   115                                  ;;               or string end
   116                                  ;;=========================================================================
   117                                  
   118                                  next_flag:
   119 00000064 803F00                              cmp     byte [rdi], 0
   120 00000067 740A                                je      .exit
   121 00000069 803F25                              cmp     byte [rdi], '%'
   122 0000006C 7405                                je      .exit
   123 0000006E 48FFC7                              inc     rdi
   124 00000071 EBF1                                jmp     next_flag
   125                                  .exit:
   126 00000073 C3                                  ret
   127                                  
   128                                  ;;=========================================================================
   129                                  ;; Parse flag and print current argument according to flag
   130                                  ;;
   131                                  ;; ENTRY: RDI <- position where is flag
   132                                  ;;        RBP <- address of current argument
   133                                  ;; Destr: RAX RBX RCX RDX RSI ; DF
   134                                  ;;=========================================================================
   135                                  
   136                                  SHIELD_FLAG equ '%'
   137                                  
   138                                  CHAR_FLAG   equ 'c'
   139                                  CSTR_FLAG   equ 's'
   140                                  BINT_FLAG   equ 'b'
   141                                  OINT_FLAG   equ 'o'
   142                                  XINT_FLAG   equ 'x'
   143                                  UINT_FLAG   equ 'u'
   144                                  DINT_FLAG   equ 'd'
   145                                  
   146                                  parse_flag:
   147 00000074 57                                  push    rdi                             ; save current position
   148                                  
   149 00000075 803F25                              cmp     byte [rdi], SHIELD_FLAG         ; if shielded symbol
   150 00000078 7402                                je      .is_shield                      ; (just print it)
   151 0000007A EB0A                                jmp     .is_flag
   152                                  
   153                                  .is_shield:
   154 0000007C 40B625                              mov     sil, SHIELD_FLAG
   155 0000007F E8(00000000)                        call    _put_c                          ; print shielded symbol
   156 00000084 EB2F                                jmp     .exit
   157                                  
   158                                  .is_flag:
   159 00000086 4831C9                              xor     rcx, rcx
   160 00000089 B907000000                          mov     rcx, 7                        ; RCX - flag iterator
   161                                  
   162 0000008E 8A07                                mov     al, byte [rdi]                  ; current flag
   163 00000090 488B7500                            mov     rsi, qword [rbp]                ; current argument
   164 00000094 48BF-                               mov     rdi, flag_table
   164 00000096 [0000000000000000] 
   165                                  
   166 0000009E FC                                  cld
   167 0000009F F2AE                                repne   scasb 
   168 000000A1 7512                                jne     .exit
   169                                  
   170                                  .call_suitable_func:
   171                                  
   172 000000A3 4889CF                              mov     rdi, rcx
   173 000000A6 B906000000                          mov     rcx, 6
   174 000000AB 4829F9                              sub     rcx, rdi
   175                                  
   176 000000AE FF14CD[08000000]                    call    qword [call_table+8*rcx]        ; print current arg
   177                                  
   178                                  .exit:
   179 000000B5 5F                                  pop     rdi                             ; restore current position
   180                                  
   181 000000B6 C3                                  ret
   182                                  
   183                                  ;;-------------------------------------------------------------------------
   184                                  
   185                                              section .data
   186                                  
   187                                  flag_table:
   188 00000000 7564626F78                          db UINT_FLAG, DINT_FLAG, BINT_FLAG, OINT_FLAG, XINT_FLAG
   189 00000005 637300                              db CHAR_FLAG, CSTR_FLAG,                                    0
   190                                  
   191                                  call_table:
   192 00000008 [0000000000000000]-                 dq _put_u,    _put_d,    _put_b,    _put_o,    _put_x
   192 00000010 [0000000000000000]-
   192 00000018 [0000000000000000]-
   192 00000020 [0000000000000000]-
   192 00000028 [0000000000000000] 
   193 00000030 [0000000000000000]-                 dq _put_c,    _put_s,                                       0
   193 00000038 [0000000000000000]-
   193 00000040 0000000000000000   
   194                                  
   195                                  ;;=========================================================================
   196                                  
   197                                  
   198                                  
   199                                  
   200                                  
   201                                  
   202                                  
   203                                  
   204                                  
